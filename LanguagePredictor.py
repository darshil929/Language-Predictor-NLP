# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cXZxHI_V07Rf_u3FqKzpudQCFul4iuME
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
import re
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
data = pd.read_csv('"C:\Users\Darshil Thakkar\Desktop\Language Predictor using NLP\newDataset.csv"')
X = data["Text"]
y = data["Language"]
le = LabelEncoder() 
y = le.fit_transform(y)
data_list = []

for text in X:

        text = re.sub(r'[!@#$(),n"%^*?:;~`0-9]', ' ', text)
        text = re.sub(r'[[]]', ' ', text)

        text = text.lower()

        data_list.append(text)
cv = CountVectorizer()
X = cv.fit_transform(data_list).toarray()
X.shape
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)
from sklearn.naive_bayes import MultinomialNB
model = MultinomialNB()
model.fit(x_train, y_train)
y_pred = model.predict(x_test)
ac = accuracy_score(y_test, y_pred)
cm = confusion_matrix(y_test, y_pred)

def predict(text):
    x = cv.transform([text]).toarray()
    lang = model.predict(x)
    lang = le.inverse_transform(lang)
    return lang[0]



import tkinter as tk
import customtkinter

customtkinter.set_appearance_mode("light")
customtkinter.set_default_color_theme("green")


class LanguagePredictorGUI:
    def __init__(self, master):
        self.master = master
        master.title("Language Predictor")

        self.label = tk.Label(master, text="Enter Text to predict Language:")
        self.label.pack()

        self.text_box = tk.Text(master, height=10, width=50, font=("Helvetica", 16))
        self.text_box.pack()

        self.button = customtkinter.CTkButton(master, text="Predict", command=self.predict_language)
        self.button.pack()

        self.result_label = tk.Label(master, text="")
        self.result_label.pack()
        progressbar = customtkinter.CTkProgressBar(master=root)
        progressbar.pack(padx=20, pady=10)
        progressbar.set(ac)
        self.result_label.config(text=f"Model Accuracy: {ac * 100}%")

    def predict_language(self):
        text = self.text_box.get("1.0", "end-1c")
        predicted_language = predict(text)
        self.result_label.config(text=f"Predicted language: {predicted_language}\nModel Accuracy: {ac * 100}%")

root = customtkinter.CTk()
my_gui = LanguagePredictorGUI(root)
root.mainloop()